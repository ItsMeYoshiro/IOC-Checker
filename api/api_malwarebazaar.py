import os
import requests
import json

API_URL = "https://mb-api.abuse.ch/api/v1/"
API_KEY = os.getenv("MALWAREBAZAAR_API_KEY")

def malwarebazaar_report(hash_value):
    if not API_KEY:
        return {"source": "MalwareBazaar", "error": "API key not set."}

    headers = {
        "Auth-Key": API_KEY
    }

    payload = {
        "query": "get_info",
        "hash": hash_value
    }

    try:
        response = requests.post(API_URL, headers=headers, data=payload, timeout=10)

        if response.status_code == 401:
            return {"source": "MalwareBazaar", "error": "Unauthorized (401): Invalid API key."}

        if response.status_code != 200:
            return {"source": "MalwareBazaar", "error": f"HTTP {response.status_code}", "details": response.text[:200]}

        try:
            data = response.json()
        except json.JSONDecodeError:
            return {"source": "MalwareBazaar", "error": "Failed to decode JSON response.", "details": response.text[:200]}

        if data.get("query_status") == "ok" and data.get("data"):
            info = data["data"][0]
            return {
                "source": "MalwareBazaar",
                "file_name": info.get("file_name"),
                "file_type": info.get("file_type_mime"),
                "signature": info.get("signature"),
                "tags": info.get("tags"),
                "first_seen": info.get("first_seen"),
                "reporter": info.get("reporter"),
            }
        elif data.get("query_status") == "hash_not_found":
            return {"source": "MalwareBazaar", "info": "Hash not found in database."}
        else:
            return {"source": "MalwareBazaar", "error": f"Unexpected response: {data.get('query_status')}"}

    except requests.exceptions.RequestException as e:
        return {"source": "MalwareBazaar", "error": f"Request error: {str(e)}"}